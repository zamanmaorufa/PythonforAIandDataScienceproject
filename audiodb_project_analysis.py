# -*- coding: utf-8 -*-
"""AudioDB project analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-X9uDrJuk4aTY_5jeKcVBhiphQttsM5
"""

import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
api_url = 'https://theaudiodb.com/api/v1/json/2/artist.php?i=112024'
response = requests.get(api_url)

data = response.json()
df = pd.DataFrame(data['artists'][0], index=[0])
print(df)

df.to_csv('data.csv')

df.head()

# Select relevant columns (album name, track popularity, and video availability)
filtered_data = df[['strArtist', 'strArtistStripped', 'strArtistAlternate', 'strDisbanded']]
filtered_data.dropna(inplace=True)  # Remove any rows with missing data
print(filtered_data.head())

import seaborn as sns
import matplotlib.pyplot as plt

# Hypothetical data for demonstration
df = pd.DataFrame({
    'has_music_video': [1, 0, 1, 1, 0],  # 1 = has video, 0 = no video
    'popularity': [85, 50, 90, 78, 65]
})

# Bar plot
sns.barplot(x='has_music_video', y='popularity', data=df)
plt.title('Average Popularity of Songs with and without Music Videos')
plt.xlabel('Has Music Video')
plt.ylabel('Popularity')
plt.show()

# Box plot
sns.boxplot(x='has_music_video', y='popularity', data=df)
plt.title('Distribution of Popularity Scores by Music Video Presence')
plt.xlabel('Has Music Video')
plt.ylabel('Popularity')
plt.show()

from scipy import stats

# Example data for popularity of songs with and without music videos
popularity_with_video = [85, 90, 78, 88]
popularity_without_video = [50, 65, 70, 60]

# Perform t-test
t_stat, p_value = stats.ttest_ind(popularity_with_video, popularity_without_video)

print(f"T-statistic: {t_stat}, P-value: {p_value}")

# Conclusion based on p-value
if p_value < 0.05:
    print("Reject the null hypothesis: Songs with music videos are more popular.")
else:
    print("Fail to reject the null hypothesis: No significant difference.")

"""That was my first hypothesis and its proved that songs with music video got more popular.

"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

df = pd.DataFrame({'intSales': [10, 20, 30, 40, 50],
                   'intScore': [60, 70, 80, 90, 100]})
# creating filtered data:
filtered_data = df[df['intSales'] > 25]

# Scatter plot to show the relationship between sales and popularity (using score as a proxy for popularity)
sns.scatterplot(x='intSales', y='intScore', data=filtered_data)
plt.title('Relationship Between Album Sales and Popularity')
plt.xlabel('Sales')
plt.ylabel('Popularity Score')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

intLoved_data = [100, 250, 320, 480, 550]
df['intLoved'] = intLoved_data
filtered_data = df[df['intSales'] > 25]

heatmap_data = filtered_data[['intSales', 'intLoved', 'intScore']]

# Calculate the correlation matrix
correlation_matrix = heatmap_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='magma', linewidths=0.5)
plt.title('Correlation Between Sales, Popularity, and Loved Count')
plt.show()

# Calculate the Pearson correlation between sales and popularity
correlation = filtered_data[['intSales', 'intScore']].corr(method='pearson')

print("Correlation between Sales and Popularity Score:")
print(correlation)

from sklearn.linear_model import LinearRegression
import numpy as np

# Prepare data for regression
X = filtered_data['intSales'].values.reshape(-1, 1)  # Sales as the independent variable
y = filtered_data['intScore'].values  # Popularity score as the dependent variable

# Perform linear regression
model = LinearRegression()
model.fit(X, y)

# Print the slope (coefficient) and intercept of the regression line
print(f"Slope: {model.coef_[0]}")
print(f"Intercept: {model.intercept_}")

# Plot regression line with the scatter plot
plt.scatter(filtered_data['intSales'], filtered_data['intScore'], color='blue')
plt.plot(filtered_data['intSales'], model.predict(X), color='red')  # Regression line
plt.title('Linear Regression: Sales vs. Popularity Score')
plt.xlabel('Sales')
plt.ylabel('Popularity Score')
plt.show()

# Hypothetical t-test to compare high-sales and low-sales albums
from scipy import stats

# Split data into two groups: high-sales and low-sales
high_sales = filtered_data[filtered_data['intSales'] > filtered_data['intSales'].median()]['intScore']
low_sales = filtered_data[filtered_data['intSales'] <= filtered_data['intSales'].median()]['intScore']

# Perform t-test
t_stat, p_value = stats.ttest_ind(high_sales, low_sales)
print(f"T-statistic: {t_stat}, P-value: {p_value}")

# Conclusion based on p-value
if p_value < 0.05:
    print("Reject the null hypothesis: Higher sales are associated with higher popularity.")
else:
    print("Fail to reject the null hypothesis: No significant relationship between sales and popularity.")